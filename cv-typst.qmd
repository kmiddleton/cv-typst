---
title: "Albert Einstein's CV"
author:
  firstname: Albert
  lastname: Einstein
  address: "Rämistrasse 101, CH-8092 Zürich, Switzerland, Zürich"
  position: "Research Physicist ・ Professor"
  contacts:
    - icon: fa envelope
      text: ae@example.com
      url: "mailto:ae@example.com"
    - icon: assets/icon/bi-house-fill.svg
      text: example.com
      url: https://example.com
    - icon: fa brands orcid
      text: 0000-0000-0000-0000
      url: https://orcid.org/0000-0000-0000-0000
    - icon: fa brands github
      text: GitHub
      url: https://github.com/example
    - icon: fa brands linkedin
      text: LinkedIn
      url: https://linkedin.com/in/example
    - icon: fa brands x-twitter
      text: twitter
      url: https://twitter.com/example
style:
  color-accent: 516db0  
format:
  awesomecv-typst:
    keep-typ: true
execute: 
  echo: false
  warning: false
filters:
  - section-bibliographies
citeproc: false
bibliography: Paperpile.bib
---

```{r}
#| echo: false

library(typstcv)
library(vitae)
library(tidyverse)

include_refs <- TRUE
```


## Education

```{r}
#| output: asis

structure(list(degree = c("Bachelor in Economics", "Master in Economics and Finance", "PhD. Candidate in Economics"), start = structure(c(16161, 18140, 18871), class = "Date"), end = structure(c(17956, 18808, NA), class = "Date"), 
               institution = c("The University of Tokyo", "CEMFI", "CEMFI"
               ), location = c("Tokyo, Japan", "Madrid, Spain", "Madrid, Spain"
               ), detail = c("", "", "")), class = "data.frame", row.names = c(NA, 
                                                                               -3L)) |>
  format_date(end = "end", sort_by = "start") |>
  
  resume_entry(title = "degree",
               description = "institution")

```


## Publications

A full list of my published work can be found at: \href{https://www.ncbi.nlm.nih.gov/myncbi/kevin.middleton.1/bibliography/public/}{\color[HTML]{000090}{NIH PubMed}}


### Dissertation

```{r}
# Load bib file
bib_entries <- bibliography_entries("Paperpile.bib")
```

```{r doctoral-dissertation}
#| output: asis

if (include_refs) {
  bib_entries |>
    filter(str_detect(keyword, "CV/Dissertation"))
}
```


### Refereed Research Papers

```{r research-papers, eval=TRUE}
if (include_refs) {
  bib_entries |>
    filter(str_detect(keyword, "CV/Papers")) |>
    arrange(issued, author)
}
```


```{=typst}
#show bibliography: none
#bibliography("Paperpile.bib")

// Keep track of all references, clearing every time a new heading is shown
#let section-refs = state("section-refs", ())

// Add bibliography references to the current section's state
#show ref: it => {
  if it.element != none {
    // Citing a document element like a figure, not a bib key
    // So don't update refs
    it
    return
  }
  section-refs.update(old => {
    if it.target not in old {
      old.push(it.target)
    }
    old
  })
  locate(loc => {
    let idx = section-refs.at(loc).position(el => el == it.target)
    "[" + str(idx + 1) + "]"
  })
}

// Print the "per-section" bibliography
#let section-bib() = locate(loc => {
  let ref-counter = counter("section-refs")
  ref-counter.update(1)
  show regex("^\[(\d+)\]\s"): it => [
    [#ref-counter.display()]
  ]
  for target in section-refs.at(loc) {
    block(cite(target, form: "full"))
    ref-counter.step()
  }
})

// Clear the previously stored references every time a level 1 heading
// is created.
#show heading.where(level: 1): it => {
  section-refs.update(())
  it
}



= First Section
My reference @Ward2018-ix and another @Gatesy1999-wj

#section-bib()

= Second Section
Another reference @Ward2018-ix and another @Gatesy1999-wj, @McGechie2018-sd

#section-bib()

```
